// Generated by the C# M2TypesGenerator: modify at your own risk!
// ReSharper disable InconsistentNaming
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable SuggestVarOrType_Elsewhere
#pragma warning disable 1591
#nullable enable
namespace Languages;
using LionWeb.Core;
using LionWeb.Core.M2;
using LionWeb.Core.M3;
using LionWeb.Core.Notification;
using LionWeb.Core.Notification.Partition;
using LionWeb.Core.Notification.Partition.Emitter;
using LionWeb.Core.Notification.Pipe;
using LionWeb.Core.Utilities;
using LionWeb.Core.VersionSpecific.V2023_1;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

[LionCoreLanguage(Key = "space-PowerBudget", Version = "0.1")]
public partial class PowerBudgetLanguage : LanguageBase<IPowerBudgetFactory>
{
	public static readonly PowerBudgetLanguage Instance = new Lazy<PowerBudgetLanguage>(() => new("space-PowerBudget")).Value;
	public PowerBudgetLanguage(string id) : base(id, LionWebVersions.v2023_1)
	{
		_iPowerModuleContent = new(() => new InterfaceBase<PowerBudgetLanguage>("IPowerModuleContent", this) { Key = "IPowerModuleContent", Name = "IPowerModuleContent", ExtendsLazy = new(() => [_builtIns.INamed]) });
		_iPowerParticipant = new(() => new InterfaceBase<PowerBudgetLanguage>("IPowerParticipant", this) { Key = "IPowerParticipant", Name = "IPowerParticipant", FeaturesLazy = new(() => [IPowerParticipant_continuous, IPowerParticipant_peak]) });
		_iPowerParticipant_continuous = new(() => new PropertyBase<PowerBudgetLanguage>("IPowerParticipant-continuous", IPowerParticipant, this) { Key = "IPowerParticipant-continuous", Name = "continuous", Optional = true, Type = _builtIns.Integer });
		_iPowerParticipant_peak = new(() => new PropertyBase<PowerBudgetLanguage>("IPowerParticipant-peak", IPowerParticipant, this) { Key = "IPowerParticipant-peak", Name = "peak", Optional = true, Type = _builtIns.Integer });
		_powerConsumer = new(() => new ConceptBase<PowerBudgetLanguage>("PowerConsumer", this) { Key = "PowerConsumer", Name = "PowerConsumer", Abstract = false, Partition = false, ExtendsLazy = new(() => _builtIns.Node), ImplementsLazy = new(() => [IPowerModuleContent, IPowerParticipant]), FeaturesLazy = new(() => [PowerConsumer_providedFrom]) });
		_powerConsumer_providedFrom = new(() => new ReferenceBase<PowerBudgetLanguage>("ODgyNjBiZDctZjQ0MC00ZWNhLTk4NzMtMTJkOTRjYjZlNzQ3LzEwMDI1NjMxNTEwMTY3ODAxOTUvMTAwMjU2MzE1MTAxNjg4NTY0Nw", PowerConsumer, this) { Key = "ODgyNjBiZDctZjQ0MC00ZWNhLTk4NzMtMTJkOTRjYjZlNzQ3LzEwMDI1NjMxNTEwMTY3ODAxOTUvMTAwMjU2MzE1MTAxNjg4NTY0Nw", Name = "providedFrom", Optional = true, Multiple = true, Type = PowerSource });
		_powerModule = new(() => new ConceptBase<PowerBudgetLanguage>("PowerModule", this) { Key = "PowerModule", Name = "PowerModule", Abstract = false, Partition = true, ExtendsLazy = new(() => _builtIns.Node), ImplementsLazy = new(() => [_builtIns.INamed]), FeaturesLazy = new(() => [PowerModule_contents]) });
		_powerModule_contents = new(() => new ContainmentBase<PowerBudgetLanguage>("PowerModule-contents", PowerModule, this) { Key = "PowerModule-contents", Name = "contents", Optional = true, Multiple = true, Type = IPowerModuleContent });
		_powerSource = new(() => new ConceptBase<PowerBudgetLanguage>("PowerSource", this) { Key = "PowerSource", Name = "PowerSource", Abstract = false, Partition = false, ExtendsLazy = new(() => _builtIns.Node), ImplementsLazy = new(() => [IPowerModuleContent, IPowerParticipant]), FeaturesLazy = new(() => [PowerSource_kind]) });
		_powerSource_kind = new(() => new PropertyBase<PowerBudgetLanguage>("PowerSource-kind", PowerSource, this) { Key = "PowerSource-kind", Name = "kind", Optional = true, Type = PowerSourceKind });
		_powerSourceKind = new(() => new EnumerationBase<PowerBudgetLanguage>("PowerSourceKind", this) { Key = "PowerSourceKind", Name = "PowerSourceKind", LiteralsLazy = new(() => [PowerSourceKind_diesel, PowerSourceKind_nuclear, PowerSourceKind_solar]) });
		_powerSourceKind_diesel = new(() => new EnumerationLiteralBase<PowerBudgetLanguage>("PowerSourceKind-diesel", PowerSourceKind, this) { Key = "PowerSourceKind-diesel", Name = "diesel" });
		_powerSourceKind_nuclear = new(() => new EnumerationLiteralBase<PowerBudgetLanguage>("PowerSourceKind-nuclear", PowerSourceKind, this) { Key = "PowerSourceKind-nuclear", Name = "nuclear" });
		_powerSourceKind_solar = new(() => new EnumerationLiteralBase<PowerBudgetLanguage>("PowerSourceKind-solar", PowerSourceKind, this) { Key = "PowerSourceKind-solar", Name = "solar" });
		_factory = new PowerBudgetFactory(this);
	}

	/// <inheritdoc/>
        public override IReadOnlyList<LanguageEntity> Entities => [IPowerModuleContent, IPowerParticipant, PowerConsumer, PowerModule, PowerSource, PowerSourceKind];
	/// <inheritdoc/>
        public override IReadOnlyList<Language> DependsOn => [];

	private const string _key = "space-PowerBudget";
	/// <inheritdoc/>
        public override string Key => _key;

	private const string _name = "PowerBudget";
	/// <inheritdoc/>
        public override string Name => _name;

	private const string _version = "0.1";
	/// <inheritdoc/>
        public override string Version => _version;

	private readonly Lazy<Interface> _iPowerModuleContent;
	public Interface IPowerModuleContent => _iPowerModuleContent.Value;

	private readonly Lazy<Interface> _iPowerParticipant;
	public Interface IPowerParticipant => _iPowerParticipant.Value;

	private readonly Lazy<Property> _iPowerParticipant_continuous;
	public Property IPowerParticipant_continuous => _iPowerParticipant_continuous.Value;

	private readonly Lazy<Property> _iPowerParticipant_peak;
	public Property IPowerParticipant_peak => _iPowerParticipant_peak.Value;

	private readonly Lazy<Concept> _powerConsumer;
	public Concept PowerConsumer => _powerConsumer.Value;

	private readonly Lazy<Reference> _powerConsumer_providedFrom;
	public Reference PowerConsumer_providedFrom => _powerConsumer_providedFrom.Value;

	private readonly Lazy<Concept> _powerModule;
	public Concept PowerModule => _powerModule.Value;

	private readonly Lazy<Containment> _powerModule_contents;
	public Containment PowerModule_contents => _powerModule_contents.Value;

	private readonly Lazy<Concept> _powerSource;
	public Concept PowerSource => _powerSource.Value;

	private readonly Lazy<Property> _powerSource_kind;
	public Property PowerSource_kind => _powerSource_kind.Value;

	private readonly Lazy<Enumeration> _powerSourceKind;
	public Enumeration PowerSourceKind => _powerSourceKind.Value;

	private readonly Lazy<EnumerationLiteral> _powerSourceKind_diesel;
	public EnumerationLiteral PowerSourceKind_diesel => _powerSourceKind_diesel.Value;

	private readonly Lazy<EnumerationLiteral> _powerSourceKind_nuclear;
	public EnumerationLiteral PowerSourceKind_nuclear => _powerSourceKind_nuclear.Value;

	private readonly Lazy<EnumerationLiteral> _powerSourceKind_solar;
	public EnumerationLiteral PowerSourceKind_solar => _powerSourceKind_solar.Value;
}

public partial interface IPowerBudgetFactory : INodeFactory
{
	public PowerConsumer NewPowerConsumer(string id);
	public PowerConsumer CreatePowerConsumer();
	public PowerModule NewPowerModule(string id);
	public PowerModule CreatePowerModule();
	public PowerSource NewPowerSource(string id);
	public PowerSource CreatePowerSource();
}

public class PowerBudgetFactory : AbstractBaseNodeFactory, IPowerBudgetFactory
{
	private readonly PowerBudgetLanguage _language;
	public PowerBudgetFactory(PowerBudgetLanguage language) : base(language)
	{
		_language = language;
	}

	/// <inheritdoc/>
        public override INode CreateNode(string id, Classifier classifier)
	{
		if (_language.PowerConsumer.EqualsIdentity(classifier))
			return NewPowerConsumer(id);
		if (_language.PowerModule.EqualsIdentity(classifier))
			return NewPowerModule(id);
		if (_language.PowerSource.EqualsIdentity(classifier))
			return NewPowerSource(id);
		throw new UnsupportedClassifierException(classifier);
	}

	/// <inheritdoc/>
        public override Enum GetEnumerationLiteral(EnumerationLiteral literal)
	{
		if (_language.PowerSourceKind.EqualsIdentity(literal.GetEnumeration()))
			return EnumValueFor<PowerSourceKind>(literal);
		throw new UnsupportedEnumerationLiteralException(literal);
	}

	/// <inheritdoc/>
        public override IStructuredDataTypeInstance CreateStructuredDataTypeInstance(StructuredDataType structuredDataType, IFieldValues fieldValues)
	{
		throw new UnsupportedStructuredDataTypeException(structuredDataType);
	}

	public virtual PowerConsumer NewPowerConsumer(string id) => new(id);
	public virtual PowerConsumer CreatePowerConsumer() => NewPowerConsumer(GetNewId());
	public virtual PowerModule NewPowerModule(string id) => new(id);
	public virtual PowerModule CreatePowerModule() => NewPowerModule(GetNewId());
	public virtual PowerSource NewPowerSource(string id) => new(id);
	public virtual PowerSource CreatePowerSource() => NewPowerSource(GetNewId());
}

[LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "IPowerModuleContent")]
public partial interface IPowerModuleContent : INamedWritable, INode
{
}

[LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "IPowerParticipant")]
public partial interface IPowerParticipant : INode
{
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "IPowerParticipant-continuous")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public int? Continuous { get; set; }

	/// <remarks>Optional Property</remarks>
        public IPowerParticipant SetContinuous(int? value, INotificationId? notificationId = null);
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "IPowerParticipant-peak")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public int? Peak { get; set; }

	/// <remarks>Optional Property</remarks>
        public IPowerParticipant SetPeak(int? value, INotificationId? notificationId = null);
}

[LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "PowerConsumer")]
public partial class PowerConsumer : ConceptInstanceBase, IPowerModuleContent, IPowerParticipant, INamedWritable
{
	private string? _name = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If Name has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.VersionSpecific.V2023_1.BuiltInsLanguage_2023_1), Key = "LionCore-builtins-INamed-name")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string Name { get => _name ?? throw new UnsetFeatureException(_builtIns.INamed_name); set => SetName(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetName([NotNullWhenAttribute(true)] out string? name)
	{
		name = _name;
		return _name != null;
	}
/// <remarks>Required Property</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 INamedWritable INamedWritable.SetName(string value, INotificationId? notificationId = null) => SetName(value);
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public PowerConsumer SetName(string value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, _builtIns.INamed_name);
		PropertyNotificationEmitter emitter = new(_builtIns.INamed_name, this, value, _name, notificationId);
		emitter.CollectOldData();
		_name = value;
		emitter.Notify();
		return this;
	}

	private int? _continuous = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "IPowerParticipant-continuous")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public int? Continuous { get => _continuous; set => SetContinuous(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetContinuous([NotNullWhenAttribute(true)] out int? continuous)
	{
		continuous = _continuous;
		return _continuous != null;
	}
/// <remarks>Optional Property</remarks>
 IPowerParticipant IPowerParticipant.SetContinuous(int? value, INotificationId? notificationId = null) => SetContinuous(value);
	/// <remarks>Optional Property</remarks>
        public PowerConsumer SetContinuous(int? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter emitter = new(PowerBudgetLanguage.Instance.IPowerParticipant_continuous, this, value, _continuous, notificationId);
		emitter.CollectOldData();
		_continuous = value;
		emitter.Notify();
		return this;
	}

	private int? _peak = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "IPowerParticipant-peak")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public int? Peak { get => _peak; set => SetPeak(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetPeak([NotNullWhenAttribute(true)] out int? peak)
	{
		peak = _peak;
		return _peak != null;
	}
/// <remarks>Optional Property</remarks>
 IPowerParticipant IPowerParticipant.SetPeak(int? value, INotificationId? notificationId = null) => SetPeak(value);
	/// <remarks>Optional Property</remarks>
        public PowerConsumer SetPeak(int? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter emitter = new(PowerBudgetLanguage.Instance.IPowerParticipant_peak, this, value, _peak, notificationId);
		emitter.CollectOldData();
		_peak = value;
		emitter.Notify();
		return this;
	}

	private readonly List<PowerSource> _providedFrom = [];
	/// <remarks>Optional Multiple Reference</remarks>
        [LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "ODgyNjBiZDctZjQ0MC00ZWNhLTk4NzMtMTJkOTRjYjZlNzQ3LzEwMDI1NjMxNTEwMTY3ODAxOTUvMTAwMjU2MzE1MTAxNjg4NTY0Nw")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Reference, Optional = true, Multiple = true)]
	public IReadOnlyList<PowerSource> ProvidedFrom { get => _providedFrom.AsReadOnly(); init => AddProvidedFrom(value); }

	/// <remarks>Optional Multiple Reference</remarks>
        public bool TryGetProvidedFrom([NotNullWhenAttribute(true)] out IReadOnlyList<PowerSource> providedFrom)
	{
		providedFrom = _providedFrom;
		return _providedFrom.Count != 0;
	}

	/// <remarks>Optional Multiple Reference</remarks>
        public PowerConsumer AddProvidedFrom(IEnumerable<PowerSource> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, PowerBudgetLanguage.Instance.PowerConsumer_providedFrom);
		AssureNotNullMembers(safeNodes, PowerBudgetLanguage.Instance.PowerConsumer_providedFrom);
		ReferenceAddMultipleNotificationEmitter<PowerSource> emitter = new(PowerBudgetLanguage.Instance.PowerConsumer_providedFrom, this, safeNodes, _providedFrom.Count, notificationId);
		emitter.CollectOldData();
		_providedFrom.AddRange(safeNodes);
		emitter.Notify();
		return this;
	}

	/// <remarks>Optional Multiple Reference</remarks>
        public PowerConsumer InsertProvidedFrom(int index, IEnumerable<PowerSource> nodes, INotificationId? notificationId = null)
	{
		AssureInRange(index, _providedFrom);
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, PowerBudgetLanguage.Instance.PowerConsumer_providedFrom);
		AssureNotNullMembers(safeNodes, PowerBudgetLanguage.Instance.PowerConsumer_providedFrom);
		ReferenceAddMultipleNotificationEmitter<PowerSource> emitter = new(PowerBudgetLanguage.Instance.PowerConsumer_providedFrom, this, safeNodes, index, notificationId);
		emitter.CollectOldData();
		_providedFrom.InsertRange(index, safeNodes);
		emitter.Notify();
		return this;
	}

	/// <remarks>Optional Multiple Reference</remarks>
        public PowerConsumer RemoveProvidedFrom(IEnumerable<PowerSource> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, PowerBudgetLanguage.Instance.PowerConsumer_providedFrom);
		AssureNotNullMembers(safeNodes, PowerBudgetLanguage.Instance.PowerConsumer_providedFrom);
		RemoveAll(safeNodes, _providedFrom, ReferenceRemover<PowerSource>(PowerBudgetLanguage.Instance.PowerConsumer_providedFrom));
		return this;
	}

	public PowerConsumer(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => PowerBudgetLanguage.Instance.PowerConsumer;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			result = Name;
			return true;
		}

		if (PowerBudgetLanguage.Instance.IPowerParticipant_continuous.EqualsIdentity(feature))
		{
			result = Continuous;
			return true;
		}

		if (PowerBudgetLanguage.Instance.IPowerParticipant_peak.EqualsIdentity(feature))
		{
			result = Peak;
			return true;
		}

		if (PowerBudgetLanguage.Instance.PowerConsumer_providedFrom.EqualsIdentity(feature))
		{
			result = ProvidedFrom;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetName(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (PowerBudgetLanguage.Instance.IPowerParticipant_continuous.EqualsIdentity(feature))
		{
			if (value is null or int)
			{
				SetContinuous((int?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (PowerBudgetLanguage.Instance.IPowerParticipant_peak.EqualsIdentity(feature))
		{
			if (value is null or int)
			{
				SetPeak((int?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (PowerBudgetLanguage.Instance.PowerConsumer_providedFrom.EqualsIdentity(feature))
		{
			var safeNodes = PowerBudgetLanguage.Instance.PowerConsumer_providedFrom.AsNodes<Languages.PowerSource>(value).ToList();
			AssureNotNull(safeNodes, PowerBudgetLanguage.Instance.PowerConsumer_providedFrom);
			AssureNotNullMembers(safeNodes, PowerBudgetLanguage.Instance.PowerConsumer_providedFrom);
			ReferenceSetNotificationEmitter<PowerSource> emitter = new(PowerBudgetLanguage.Instance.PowerConsumer_providedFrom, this, safeNodes, _providedFrom, notificationId);
			emitter.CollectOldData();
			_providedFrom.Clear();
			_providedFrom.AddRange(safeNodes);
			emitter.Notify();
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetName(out _))
			result.Add(_builtIns.INamed_name);
		if (TryGetContinuous(out _))
			result.Add(PowerBudgetLanguage.Instance.IPowerParticipant_continuous);
		if (TryGetPeak(out _))
			result.Add(PowerBudgetLanguage.Instance.IPowerParticipant_peak);
		if (TryGetProvidedFrom(out _))
			result.Add(PowerBudgetLanguage.Instance.PowerConsumer_providedFrom);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "PowerModule")]
public partial class PowerModule : ConceptInstanceBase, INamedWritable, IPartitionInstance<INode>
{
	private string? _name = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If Name has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.VersionSpecific.V2023_1.BuiltInsLanguage_2023_1), Key = "LionCore-builtins-INamed-name")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string Name { get => _name ?? throw new UnsetFeatureException(_builtIns.INamed_name); set => SetName(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetName([NotNullWhenAttribute(true)] out string? name)
	{
		name = _name;
		return _name != null;
	}
/// <remarks>Required Property</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 INamedWritable INamedWritable.SetName(string value, INotificationId? notificationId = null) => SetName(value);
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public PowerModule SetName(string value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, _builtIns.INamed_name);
		PropertyNotificationEmitter emitter = new(_builtIns.INamed_name, this, value, _name, notificationId);
		emitter.CollectOldData();
		_name = value;
		emitter.Notify();
		return this;
	}

	private readonly List<IPowerModuleContent> _contents = [];
	/// <remarks>Optional Multiple Containment</remarks>
        [LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "PowerModule-contents")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Containment, Optional = true, Multiple = true)]
	public IReadOnlyList<IPowerModuleContent> Contents { get => _contents.AsReadOnly(); init => AddContents(value); }

	/// <remarks>Optional Multiple Containment</remarks>
        public bool TryGetContents([NotNullWhenAttribute(true)] out IReadOnlyList<IPowerModuleContent> contents)
	{
		contents = _contents;
		return _contents.Count != 0;
	}

	/// <remarks>Optional Multiple Containment</remarks>
        public PowerModule AddContents(IEnumerable<IPowerModuleContent> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, PowerBudgetLanguage.Instance.PowerModule_contents);
		AssureNotNullMembers(safeNodes, PowerBudgetLanguage.Instance.PowerModule_contents);
		ContainmentAddMultipleNotificationEmitter<IPowerModuleContent> emitter = new(PowerBudgetLanguage.Instance.PowerModule_contents, this, safeNodes, _contents, null, notificationId);
		emitter.CollectOldData();
		_contents.AddRange(SetSelfParent(safeNodes, PowerBudgetLanguage.Instance.PowerModule_contents));
		emitter.Notify();
		return this;
	}

	/// <remarks>Optional Multiple Containment</remarks>
        public PowerModule InsertContents(int index, IEnumerable<IPowerModuleContent> nodes, INotificationId? notificationId = null)
	{
		AssureInRange(index, _contents);
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, PowerBudgetLanguage.Instance.PowerModule_contents);
		AssureNoSelfMove(index, safeNodes, _contents);
		AssureNotNullMembers(safeNodes, PowerBudgetLanguage.Instance.PowerModule_contents);
		ContainmentAddMultipleNotificationEmitter<IPowerModuleContent> emitter = new(PowerBudgetLanguage.Instance.PowerModule_contents, this, safeNodes, _contents, index, notificationId);
		emitter.CollectOldData();
		_contents.InsertRange(index, SetSelfParent(safeNodes, PowerBudgetLanguage.Instance.PowerModule_contents));
		emitter.Notify();
		return this;
	}

	/// <remarks>Optional Multiple Containment</remarks>
        public PowerModule RemoveContents(IEnumerable<IPowerModuleContent> nodes, INotificationId? notificationId = null)
	{
		RemoveSelfParent(nodes?.ToList(), _contents, PowerBudgetLanguage.Instance.PowerModule_contents, ContainmentRemover<IPowerModuleContent>(PowerBudgetLanguage.Instance.PowerModule_contents));
		return this;
	}

	public PowerModule(string id) : base(id)
	{
		_notificationProducer = new PartitionNotificationProducer(this);
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => PowerBudgetLanguage.Instance.PowerModule;
	private readonly IPartitionNotificationProducer? _notificationProducer;
	IPartitionNotificationProducer? IPartitionInstance.GetNotificationProducer() => _notificationProducer;
	/// <inheritdoc/>
        public INotificationSender? GetNotificationSender() => _notificationProducer;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			result = Name;
			return true;
		}

		if (PowerBudgetLanguage.Instance.PowerModule_contents.EqualsIdentity(feature))
		{
			result = Contents;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetName(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (PowerBudgetLanguage.Instance.PowerModule_contents.EqualsIdentity(feature))
		{
			var safeNodes = PowerBudgetLanguage.Instance.PowerModule_contents.AsNodes<Languages.IPowerModuleContent>(value).ToList();
			ContainmentSetNotificationEmitter<IPowerModuleContent> emitter = new(PowerBudgetLanguage.Instance.PowerModule_contents, this, safeNodes, _contents, notificationId);
			emitter.CollectOldData();
			RemoveSelfParent(_contents.ToList(), _contents, PowerBudgetLanguage.Instance.PowerModule_contents);
			_contents.AddRange(SetSelfParent(safeNodes, PowerBudgetLanguage.Instance.PowerModule_contents));
			emitter.Notify();
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetName(out _))
			result.Add(_builtIns.INamed_name);
		if (TryGetContents(out _))
			result.Add(PowerBudgetLanguage.Instance.PowerModule_contents);
		return result;
	}

	/// <inheritdoc/>
        protected override bool DetachChild(INode child)
	{
		if (base.DetachChild(child))
			return true;
		Containment? c = GetContainmentOf(child);
		if (PowerBudgetLanguage.Instance.PowerModule_contents.EqualsIdentity(c))
		{
			RemoveSelfParent(child, _contents, PowerBudgetLanguage.Instance.PowerModule_contents);
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        public override Containment? GetContainmentOf(INode child)
	{
		Containment? result = base.GetContainmentOf(child);
		if (result != null)
			return result;
		if (child is IPowerModuleContent child0 && _contents.Contains(child0))
			return PowerBudgetLanguage.Instance.PowerModule_contents;
		return null;
	}
}

[LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "PowerSource")]
public partial class PowerSource : ConceptInstanceBase, IPowerModuleContent, IPowerParticipant, INamedWritable
{
	private string? _name = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If Name has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.VersionSpecific.V2023_1.BuiltInsLanguage_2023_1), Key = "LionCore-builtins-INamed-name")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string Name { get => _name ?? throw new UnsetFeatureException(_builtIns.INamed_name); set => SetName(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetName([NotNullWhenAttribute(true)] out string? name)
	{
		name = _name;
		return _name != null;
	}
/// <remarks>Required Property</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 INamedWritable INamedWritable.SetName(string value, INotificationId? notificationId = null) => SetName(value);
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public PowerSource SetName(string value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, _builtIns.INamed_name);
		PropertyNotificationEmitter emitter = new(_builtIns.INamed_name, this, value, _name, notificationId);
		emitter.CollectOldData();
		_name = value;
		emitter.Notify();
		return this;
	}

	private int? _continuous = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "IPowerParticipant-continuous")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public int? Continuous { get => _continuous; set => SetContinuous(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetContinuous([NotNullWhenAttribute(true)] out int? continuous)
	{
		continuous = _continuous;
		return _continuous != null;
	}
/// <remarks>Optional Property</remarks>
 IPowerParticipant IPowerParticipant.SetContinuous(int? value, INotificationId? notificationId = null) => SetContinuous(value);
	/// <remarks>Optional Property</remarks>
        public PowerSource SetContinuous(int? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter emitter = new(PowerBudgetLanguage.Instance.IPowerParticipant_continuous, this, value, _continuous, notificationId);
		emitter.CollectOldData();
		_continuous = value;
		emitter.Notify();
		return this;
	}

	private int? _peak = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "IPowerParticipant-peak")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public int? Peak { get => _peak; set => SetPeak(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetPeak([NotNullWhenAttribute(true)] out int? peak)
	{
		peak = _peak;
		return _peak != null;
	}
/// <remarks>Optional Property</remarks>
 IPowerParticipant IPowerParticipant.SetPeak(int? value, INotificationId? notificationId = null) => SetPeak(value);
	/// <remarks>Optional Property</remarks>
        public PowerSource SetPeak(int? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter emitter = new(PowerBudgetLanguage.Instance.IPowerParticipant_peak, this, value, _peak, notificationId);
		emitter.CollectOldData();
		_peak = value;
		emitter.Notify();
		return this;
	}

	private PowerSourceKind? _kind = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "PowerSource-kind")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public PowerSourceKind? Kind { get => _kind; set => SetKind(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetKind([NotNullWhenAttribute(true)] out PowerSourceKind? kind)
	{
		kind = _kind;
		return _kind != null;
	}

	/// <remarks>Optional Property</remarks>
        public PowerSource SetKind(PowerSourceKind? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter emitter = new(PowerBudgetLanguage.Instance.PowerSource_kind, this, value, _kind, notificationId);
		emitter.CollectOldData();
		_kind = value;
		emitter.Notify();
		return this;
	}

	public PowerSource(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => PowerBudgetLanguage.Instance.PowerSource;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			result = Name;
			return true;
		}

		if (PowerBudgetLanguage.Instance.IPowerParticipant_continuous.EqualsIdentity(feature))
		{
			result = Continuous;
			return true;
		}

		if (PowerBudgetLanguage.Instance.IPowerParticipant_peak.EqualsIdentity(feature))
		{
			result = Peak;
			return true;
		}

		if (PowerBudgetLanguage.Instance.PowerSource_kind.EqualsIdentity(feature))
		{
			result = Kind;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetName(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (PowerBudgetLanguage.Instance.IPowerParticipant_continuous.EqualsIdentity(feature))
		{
			if (value is null or int)
			{
				SetContinuous((int?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (PowerBudgetLanguage.Instance.IPowerParticipant_peak.EqualsIdentity(feature))
		{
			if (value is null or int)
			{
				SetPeak((int?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (PowerBudgetLanguage.Instance.PowerSource_kind.EqualsIdentity(feature))
		{
			if (value is null or Languages.PowerSourceKind)
			{
				SetKind((Languages.PowerSourceKind?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetName(out _))
			result.Add(_builtIns.INamed_name);
		if (TryGetContinuous(out _))
			result.Add(PowerBudgetLanguage.Instance.IPowerParticipant_continuous);
		if (TryGetPeak(out _))
			result.Add(PowerBudgetLanguage.Instance.IPowerParticipant_peak);
		if (TryGetKind(out _))
			result.Add(PowerBudgetLanguage.Instance.PowerSource_kind);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "PowerSourceKind")]
public enum PowerSourceKind
{
	[LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "PowerSourceKind-diesel")]
	diesel,
	[LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "PowerSourceKind-nuclear")]
	nuclear,
	[LionCoreMetaPointer(Language = typeof(PowerBudgetLanguage), Key = "PowerSourceKind-solar")]
	solar
}